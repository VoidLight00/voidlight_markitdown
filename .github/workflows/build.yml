name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pre-commit
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/development.txt
        
    - name: Run pre-commit
      uses: pre-commit/action@v3.0.0
      
    - name: Run security checks
      run: |
        bandit -r src -f json -o bandit-report.json
        safety check --json --output safety-report.json
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-kor poppler-utils ffmpeg
        
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install tesseract tesseract-lang poppler ffmpeg
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/testing.txt
        pip install -e .
        
    - name: Run unit tests
      run: |
        pytest tests/unit -v --cov=src/voidlight_markitdown --cov-report=xml --cov-report=html
        
    - name: Run integration tests
      run: |
        pytest tests/integration -v --timeout=300
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        name: ${{ matrix.os }}-${{ matrix.python-version }}
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          htmlcov/
          .coverage
          coverage.xml

  build:
    name: Build Package
    needs: [quality, test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Generate SBOM
      run: |
        pip install pip-licenses
        pip-licenses --format=json --with-urls --output-file=sbom.json
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: |
          dist/
          sbom.json

  docker:
    name: Build Docker Images
    needs: [quality, test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build main image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: |
          voidlight/markitdown:latest
          voidlight/markitdown:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build MCP image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.mcp
        push: false
        tags: |
          voidlight/markitdown-mcp:latest
          voidlight/markitdown-mcp:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'voidlight/markitdown:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  performance:
    name: Performance Tests
    needs: [test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/testing.txt
        pip install -e .
        
    - name: Run benchmarks
      run: |
        python tests/performance/benchmarks/run_all_tests.py
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: |
          tests/performance/benchmarks/results/

  release-check:
    name: Release Readiness
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build, docker]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/development.txt
        
    - name: Check release readiness
      run: |
        python scripts/ci/check_release.py
        
    - name: Upload release report
      uses: actions/upload-artifact@v4
      with:
        name: release-readiness
        path: |
          build-reports/release-readiness.json