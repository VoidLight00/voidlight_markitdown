name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -r requirements/development.txt
        
    - name: Build package
      run: |
        python -m build
        
    - name: Generate changelog
      id: changelog
      run: |
        python scripts/maintenance/generate_changelog.py --release-notes > release-notes.md
        echo "::set-output name=notes::$(cat release-notes.md)"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release-notes.md
        files: |
          dist/*
          sbom.json
        draft: false
        prerelease: false
        
    - name: Upload to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  docker:
    name: Build and Push Docker Images
    needs: release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          voidlight/markitdown
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
          
    - name: Build and push main image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push MCP image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.mcp
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          voidlight/markitdown-mcp:latest
          voidlight/markitdown-mcp:${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    needs: [release, docker]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Kubernetes
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      run: |
        echo "$KUBE_CONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Update image tags
        kubectl set image deployment/markitdown markitdown=voidlight/markitdown:${{ github.ref_name }} -n markitdown
        kubectl set image deployment/markitdown-mcp mcp-server=voidlight/markitdown-mcp:${{ github.ref_name }} -n markitdown
        
        # Wait for rollout
        kubectl rollout status deployment/markitdown -n markitdown
        kubectl rollout status deployment/markitdown-mcp -n markitdown
        
    - name: Verify deployment
      run: |
        kubectl get pods -n markitdown
        kubectl get services -n markitdown
        
    - name: Notify success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'Release ${{ github.ref_name }} deployed successfully!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: Notify failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'Release ${{ github.ref_name }} deployment failed!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}