[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "voidlight-markitdown"
dynamic = ["version"]
description = 'An extremely simple text-based document reader with enhanced Korean language support, suitable for LLM use.'
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = ["markdown", "converter", "korean", "한국어", "text extraction", "llm"]
authors = [
  { name = "VoidLight", email = "voidlight@example.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "beautifulsoup4>=4.11.1",
  "markdownify>=0.11.6",
  "charset-normalizer>=3.1.0",
  "magika>=0.5.1",
  "requests>=2.28.2",
  "tabulate>=0.9.0",
]

[project.optional-dependencies]
docling = [
  "docling>=2.14.0",
]
llm = [
  "openai>=1.0.0",
  "azure-cognitiveservices-speech>=1.34.0",
]
audio = [
  "SpeechRecognition>=3.10.0",
  "pydub>=0.25.1",
]
image = [
  "pillow>=9.5.0",
  "pytesseract>=0.3.10",
  "easyocr>=1.7.1",  # Korean OCR support
]
pdf = [
  "pdfplumber>=0.10.2",
  "PyPDF2>=3.0.1",
]
docx = [
  "python-docx>=0.8.11",
  "mammoth>=1.5.1",
]
pptx = [
  "python-pptx>=0.6.21",
]
xlsx = [
  "openpyxl>=3.0.10",
  "pandas>=1.5.3",
  "xlrd>=2.0.1",
]
outlook = [
  "extract-msg>=0.41.1",
]
rss = [
  "feedparser>=6.0.10",
]
youtube = [
  "youtube-transcript-api>=0.6.0",
]
epub = [
  "ebooklib>=0.18",
]
zip = [
  "rarfile>=4.0",
  "py7zr>=0.20.0",
]
korean = [
  "konlpy>=0.6.0",
  "kiwipiepy>=0.17.1",
  "soynlp>=0.0.493",
  # "py-hanspell>=1.1",  # Temporarily disabled due to installation issues
  "jamo>=0.4.1",
  "hanja>=0.13.3",
]
dev = [
  "ipykernel",
  "pytest>=7.2.2",
  "hatch",
  "mypy>=1.0.0",
]
all = [
  "voidlight-markitdown[llm,audio,image,pdf,docx,pptx,xlsx,outlook,rss,youtube,epub,zip,korean]",
]

[project.urls]
Documentation = "https://github.com/voidlight/voidlight_markitdown#readme"
Issues = "https://github.com/voidlight/voidlight_markitdown/issues"
Source = "https://github.com/voidlight/voidlight_markitdown"

[tool.hatch.version]
path = "src/voidlight_markitdown/__about__.py"

[project.scripts]
voidlight-markitdown = "voidlight_markitdown.__main__:main"

[tool.hatch.envs.types]
extra-dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/voidlight_markitdown tests}"

[tool.coverage.run]
source_pkgs = ["voidlight_markitdown", "tests"]
branch = true
parallel = true
omit = [
  "src/voidlight_markitdown/__about__.py",
]

[tool.coverage.paths]
voidlight_markitdown = ["src/voidlight_markitdown", "*/voidlight_markitdown/src/voidlight_markitdown"]
tests = ["tests", "*/voidlight_markitdown/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.hatch.build.targets.sdist]
include = [
    "src/voidlight_markitdown",
    "README.md",
    "LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["src/voidlight_markitdown"]

# Black configuration
[tool.black]
line-length = 120
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
known_first_party = ["voidlight_markitdown", "voidlight_markitdown_mcp"]

# mypy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
strict_equality = true
ignore_missing_imports = true
implicit_reexport = false
show_error_codes = true
show_column_numbers = true
pretty = true

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/voidlight_markitdown",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

# pylint configuration
[tool.pylint.main]
py-version = "3.9"
jobs = 0
persistent = true
suggestion-mode = true
load-plugins = [
    "pylint.extensions.broad_try_clause",
    "pylint.extensions.code_style",
    "pylint.extensions.emptystring",
    "pylint.extensions.comparetozero",
    "pylint.extensions.comparison_placement",
    "pylint.extensions.confusing_elif",
    "pylint.extensions.for_any_all",
    "pylint.extensions.consider_refactoring_into_while_condition",
    "pylint.extensions.consider_ternary_expression",
    "pylint.extensions.bad_builtin",
    "pylint.extensions.dict_init_mutate",
    "pylint.extensions.docparams",
    "pylint.extensions.dunder",
    "pylint.extensions.check_elif",
    "pylint.extensions.empty_comment",
    "pylint.extensions.eq_without_hash",
    "pylint.extensions.private_import",
    "pylint.extensions.magic_value",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.no_self_use",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.docstyle",
    "pylint.extensions.mccabe",
    "pylint.extensions.set_membership",
    "pylint.extensions.typing",
]

[tool.pylint.messages_control]
max-line-length = 120
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0212",  # protected-access
    "W0511",  # fixme
]

[tool.pylint.reports]
output-format = "colorized"
reports = true
score = true

[tool.pylint.similarities]
min-similarity-lines = 4
ignore-imports = true

[tool.pylint.design]
max-args = 10
max-locals = 25
max-returns = 10
max-branches = 25
max-statements = 100
max-parents = 7
max-attributes = 20
min-public-methods = 1
max-public-methods = 25
max-module-lines = 1500
max-nested-blocks = 5
max-bool-expr = 5

# Bandit configuration
[tool.bandit]
targets = ["src"]
recursive = true
exclude = ["/tests", "/test"]
skips = ["B101", "B601"]

# Ruff configuration (alternative to flake8)
[tool.ruff]
target-version = "py39"
line-length = 120
fix = true
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "SIM", # flake8-simplify
]
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["D100", "D101", "D102", "D103"]

[tool.ruff.isort]
known-first-party = ["voidlight_markitdown", "voidlight_markitdown_mcp"]

[tool.ruff.mccabe]
max-complexity = 10